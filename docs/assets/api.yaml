openapi: 3.0.0
info:
  title: Restaurant API
  version: 1.0.0
  description: API для работы с заказами в ресторане, программой лояльности, технологическими картами и роботами

tags:
  - name: Menu
    description: Операции с меню ресторана
  - name: Cart
    description: Операции с корзиной
  - name: Orders
    description: Операции с заказами
  - name: Loyalty
    description: Операции с программой лояльности
  - name: Robots
    description: Операции с роботами
  - name: Recipes
    description: Операции с технологическими картами

paths:
  /menu:
    get:
      tags:
        - Menu
      summary: Получить меню ресторана
      operationId: getMenu
      responses:
        '200':
          description: Меню успешно получено
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    dishId:
                      type: string
                      format: uuid
                      description: Уникальный идентификатор блюда
                    name:
                      type: string
                      description: Название блюда
                    price:
                      type: number
                      format: float
                      description: Цена блюда
                    isDiscounted:
                      type: boolean
                      description: Есть ли на блюдо скидка
        '500':
          description: Внутренняя ошибка сервера

  /cart:
    get:
      tags:
        - Cart
      summary: Просмотреть корзину
      operationId: getCart
      responses:
        '200':
          description: Корзина успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPrice:
                    type: number
                    format: float
                    description: Общая сумма заказа
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        dishId:
                          type: string
                          format: uuid
                          description: Уникальный идентификатор блюда
                        name:
                          type: string
                          description: Название блюда
                        quantity:
                          type: integer
                          description: Количество порций
                        price:
                          type: number
                          format: float
                          description: Цена блюда
        '500':
          description: Внутренняя ошибка сервера

  /cart/{dishId}:
    delete:
      tags:
        - Cart
      summary: Удалить блюдо из корзины
      operationId: removeDishFromCart
      parameters:
        - name: dishId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор блюда
      responses:
        '200':
          description: Блюдо успешно удалено из корзины
        '404':
          description: Блюдо не найдено в корзине
        '500':
          description: Внутренняя ошибка сервера

  /orders:
    post:
      tags:
        - Orders
      summary: Создать новый заказ
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      dishId:
                        type: string
                        format: uuid
                        description: Уникальный идентификатор блюда
                      quantity:
                        type: integer
                        description: Количество порций
                paymentMethod:
                  type: string
                  enum: [card, cash]
                  description: Способ оплаты
                pickupMethod:
                  type: string
                  enum: [dine_in, take_away]
                  description: Метод получения
      responses:
        '201':
          description: Заказ успешно создан
        '400':
          description: Некорректные данные
        '500':
          description: Внутренняя ошибка сервера

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Получить детали заказа
      operationId: getOrderDetails
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор заказа
      responses:
        '200':
          description: Детали заказа успешно получены
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                    format: uuid
                    description: Уникальный идентификатор заказа
                  status:
                    type: string
                    description: Статус заказа
                  totalPrice:
                    type: number
                    format: float
                    description: Общая сумма заказа
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        dishId:
                          type: string
                          format: uuid
                          description: Уникальный идентификатор блюда
                        name:
                          type: string
                          description: Название блюда
                        quantity:
                          type: integer
                          description: Количество порций
                        price:
                          type: number
                          format: float
                          description: Цена блюда
        '404':
          description: Заказ не найден
        '500':
          description: Внутренняя ошибка сервера

  /orders/{orderId}/pay:
    post:
      tags:
        - Orders
      summary: Оплатить заказ
      operationId: payForOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор заказа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
                  enum: [card, cash]
                  description: Способ оплаты
      responses:
        '200':
          description: Заказ успешно оплачен
        '400':
          description: Некорректные данные оплаты
        '404':
          description: Заказ не найден
        '500':
          description: Внутренняя ошибка сервера

  /orders/{orderId}/cancel:
    post:
      tags:
        - Orders
      summary: Отмена заказа
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор заказа
      responses:
        '200':
          description: Заказ успешно отменен
        '404':
          description: Заказ не найден или уже выполнен
        '500':
          description: Внутренняя ошибка сервера

  /loyalty/register:
    post:
      tags:
        - Loyalty
      summary: Регистрация в программе лояльности
      operationId: registerLoyalty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Имя пользователя
                email:
                  type: string
                  format: email
                  description: Электронная почта пользователя
                phone:
                  type: string
                  description: Телефон пользователя
      responses:
        '201':
          description: Успешная регистрация в программе лояльности
        '400':
          description: Некорректные данные регистрации
        '500':
          description: Внутренняя ошибка сервера

  /loyalty/{clientId}/balance:
    get:
      tags:
        - Loyalty
      summary: Проверить баланс программы лояльности
      operationId: getLoyaltyBalance
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор клиента
      responses:
        '200':
          description: Баланс программы лояльности успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float
                    description: Баланс программы лояльности
        '404':
          description: Клиент не найден
        '500':
          description: Внутренняя ошибка сервера

  /robots:
    get:
      tags:
        - Robots
      summary: Получить информацию о роботах
      operationId: getRobots
      responses:
        '200':
          description: Информация о роботах успешно получена
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    robotId:
                      type: string
                      format: uuid
                      description: Уникальный идентификатор робота
                    status:
                      type: string
                      description: Статус робота
                    location:
                      type: string
                      description: Местоположение робота
                    technicalCondition:
                      type: string
                      description: Техническое состояние робота
        '500':
          description: Внутренняя ошибка
  /robots/status:
    get:
      summary: Получить статус роботов
      description: Возвращает текущее состояние всех роботов на кухне, включая их доступность и состояние.
      operationId: getRobotStatus
      tags:
        - Robots
      responses:
        '200':
          description: Статус роботов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    robotId:
                      type: string
                      format: uuid
                      description: Уникальный идентификатор робота
                    status:
                      type: string
                      enum: [active, inactive, maintenance]
                      description: Текущее состояние робота
                    task:
                      type: string
                      description: Текущая задача робота, если есть
                    lastMaintenance:
                      type: string
                      format: date-time
                      description: Дата последнего технического обслуживания
        '500':
          description: Внутренняя ошибка сервера

  /robots/{robotId}/activate:
    post:
      summary: Активация робота
      description: Активация конкретного робота для выполнения задач на кухне.
      operationId: activateRobot
      tags:
        - Robots
      parameters:
        - name: robotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор робота
      responses:
        '200':
          description: Робот успешно активирован
        '400':
          description: Некорректный запрос
        '404':
          description: Робот не найден
        '500':
          description: Внутренняя ошибка сервера

  /robots/{robotId}/deactivate:
    post:
      summary: Деактивация робота
      description: Остановка робота и перевод его в неактивное состояние.
      operationId: deactivateRobot
      tags:
        - Robots
      parameters:
        - name: robotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор робота
      responses:
        '200':
          description: Робот успешно деактивирован
        '400':
          description: Некорректный запрос
        '404':
          description: Робот не найден
        '500':
          description: Внутренняя ошибка сервера

  /recipes:
    get:
      summary: Получить список технологических карт (рецептов)
      description: Возвращает список всех технологических карт с информацией о рецептах и ингредиентах.
      operationId: getRecipes
      tags:
        - Recipes
      responses:
        '200':
          description: Список рецептов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    recipeId:
                      type: string
                      format: uuid
                      description: Уникальный идентификатор рецепта
                    name:
                      type: string
                      description: Название рецепта
                    description:
                      type: string
                      description: Описание рецепта
                    ingredients:
                      type: array
                      items:
                        type: object
                        properties:
                          ingredientId:
                            type: string
                            format: uuid
                            description: Уникальный идентификатор ингредиента
                          name:
                            type: string
                            description: Название ингредиента
                          quantity:
                            type: number
                            description: Количество ингредиента
        '500':
          description: Внутренняя ошибка сервера

  /recipes/{recipeId}:
    get:
      summary: Получить подробную информацию о рецепте
      description: Возвращает информацию о конкретной технологической карте, включая ингредиенты и шаги приготовления.
      operationId: getRecipeDetails
      tags:
        - Recipes
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор рецепта
      responses:
        '200':
          description: Информация о рецепте успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipeId:
                    type: string
                    format: uuid
                    description: Уникальный идентификатор рецепта
                  name:
                    type: string
                    description: Название рецепта
                  description:
                    type: string
                    description: Описание рецепта
                  steps:
                    type: array
                    items:
                      type: object
                      properties:
                        stepNumber:
                          type: integer
                          description: Номер шага
                        instruction:
                          type: string
                          description: Инструкция для данного шага
                  ingredients:
                    type: array
                    items:
                      type: object
                      properties:
                        ingredientId:
                          type: string
                          format: uuid
                          description: Уникальный идентификатор ингредиента
                        name:
                          type: string
                          description: Название ингредиента
                        quantity:
                          type: number
                          description: Количество ингредиента
        '404':
          description: Рецепт не найден
        '500':
          description: Внутренняя ошибка сервера

  /robots/assignTask:
    post:
      summary: Назначить задачу роботу
      description: Назначает задачу конкретному роботу на кухне, например, приготовление блюда или помощь в логистике.
      operationId: assignTaskToRobot
      tags:
        - Robots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                robotId:
                  type: string
                  format: uuid
                  description: Уникальный идентификатор робота
                task:
                  type: string
                  description: Назначенная задача робота
      responses:
        '200':
          description: Задача успешно назначена роботу
        '400':
          description: Некорректные данные
        '404':
          description: Робот не найден
        '500':
          description: Внутренняя ошибка сервера
