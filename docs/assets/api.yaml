openapi: 3.0.0
info:
  title: Restaurant API
  version: 1.0.0
  description: API для работы с заказами в ресторане, программой лояльности, технологическими картами и роботами

tags:
  - name: Menu
    description: Операции с меню ресторана
  - name: Cart
    description: Операции с корзиной
  - name: Orders
    description: Операции с заказами
  - name: Loyalty
    description: Операции с программой лояльности
  - name: Robots
    description: Операции с роботами
  - name: Recipes
    description: Операции с технологическими картами

paths:
  /menu:
    get:
      tags:
        - Menu
      summary: Получить меню ресторана
      operationId: getMenu
      responses:
        '200':
          description: Меню успешно получено
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    dishId:
                      type: string
                      format: uuid
                      description: Уникальный идентификатор блюда
                    name:
                      type: string
                      description: Название блюда
                    price:
                      type: number
                      format: float
                      description: Цена блюда
                    isDiscounted:
                      type: boolean
                      description: Есть ли на блюдо скидка
        '500':
          description: Внутренняя ошибка сервера

  /cart:
    get:
      tags:
        - Cart
      summary: Просмотреть корзину
      operationId: getCart
      responses:
        '200':
          description: Корзина успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPrice:
                    type: number
                    format: float
                    description: Общая сумма заказа
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        dishId:
                          type: string
                          format: uuid
                          description: Уникальный идентификатор блюда
                        name:
                          type: string
                          description: Название блюда
                        quantity:
                          type: integer
                          description: Количество порций
                        price:
                          type: number
                          format: float
                          description: Цена блюда
        '500':
          description: Внутренняя ошибка сервера

  /cart/{dishId}:
    delete:
      tags:
        - Cart
      summary: Удалить блюдо из корзины
      operationId: removeDishFromCart
      parameters:
        - name: dishId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор блюда
      responses:
        '200':
          description: Блюдо успешно удалено из корзины
        '404':
          description: Блюдо не найдено в корзине
        '500':
          description: Внутренняя ошибка сервера

  /orders:
    post:
      tags:
        - Orders
      summary: Создать новый заказ
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      dishId:
                        type: string
                        format: uuid
                        description: Уникальный идентификатор блюда
                      quantity:
                        type: integer
                        description: Количество порций
                paymentMethod:
                  type: string
                  enum: [card, cash]
                  description: Способ оплаты
                pickupMethod:
                  type: string
                  enum: [dine_in, take_away]
                  description: Метод получения
      responses:
        '201':
          description: Заказ успешно создан
        '400':
          description: Некорректные данные
        '500':
          description: Внутренняя ошибка сервера

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Получить детали заказа
      operationId: getOrderDetails
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор заказа
      responses:
        '200':
          description: Детали заказа успешно получены
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                    format: uuid
                    description: Уникальный идентификатор заказа
                  status:
                    type: string
                    description: Статус заказа
                  totalPrice:
                    type: number
                    format: float
                    description: Общая сумма заказа
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        dishId:
                          type: string
                          format: uuid
                          description: Уникальный идентификатор блюда
                        name:
                          type: string
                          description: Название блюда
                        quantity:
                          type: integer
                          description: Количество порций
                        price:
                          type: number
                          format: float
                          description: Цена блюда
        '404':
          description: Заказ не найден
        '500':
          description: Внутренняя ошибка сервера

  /orders/{orderId}/pay:
    post:
      tags:
        - Orders
      summary: Оплатить заказ
      operationId: payForOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор заказа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
                  enum: [card, cash]
                  description: Способ оплаты
      responses:
        '200':
          description: Заказ успешно оплачен
        '400':
          description: Некорректные данные оплаты
        '404':
          description: Заказ не найден
        '500':
          description: Внутренняя ошибка сервера

  /orders/{orderId}/cancel:
    post:
      tags:
        - Orders
      summary: Отмена заказа
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор заказа
      responses:
        '200':
          description: Заказ успешно отменен
        '404':
          description: Заказ не найден или уже выполнен
        '500':
          description: Внутренняя ошибка сервера

  /loyalty/register:
    post:
      tags:
        - Loyalty
      summary: Регистрация в программе лояльности
      operationId: registerLoyalty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Имя пользователя
                email:
                  type: string
                  format: email
                  description: Электронная почта пользователя
                phone:
                  type: string
                  description: Телефон пользователя
      responses:
        '201':
          description: Успешная регистрация в программе лояльности
        '400':
          description: Некорректные данные регистрации
        '500':
          description: Внутренняя ошибка сервера

  /loyalty/{clientId}/balance:
    get:
      tags:
        - Loyalty
      summary: Проверить баланс программы лояльности
      operationId: getLoyaltyBalance
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор клиента
      responses:
        '200':
          description: Баланс программы лояльности успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float
                    description: Баланс программы лояльности
        '404':
          description: Клиент не найден
        '500':
          description: Внутренняя ошибка сервера

  /robots:
    get:
      tags:
        - Robots
      summary: Получить информацию о роботах
      operationId: getRobots
      responses:
        '200':
          description: Информация о роботах успешно получена
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    robotId:
                      type: string
                      format: uuid
                      description: Уникальный идентификатор робота
                    status:
                      type: string
                      description: Статус робота
                    location:
                      type: string
                      description: Местоположение робота
                    technicalCondition:
                      type: string
                      description: Техническое состояние робота
        '500':
          description: Внутренняя ошибка
